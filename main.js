/* 

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
*/

let resultado1 = null
for (let i = 0; i < 1000; i++) {
    
    if(i % 3 == 0 || i % 5 == 0  ){
         resultado1 +=  i
    }
     

}
  console.log(resultado1)


/* 
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
let resultado3 = 2
let resultado2 = 0
let primerNumero = 1
let segNumero = 2
  for (let i = 3; segNumero < 4000000; i++) {
    
    let aux = primerNumero + segNumero
    primerNumero = segNumero
    segNumero = aux
    
    if (aux % 2 == 0) {
        resultado3 += aux
    }
    
    console.log(resultado3)
}
/* 


The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?

*/

var divisor = 2;
var number = 600851475143;
while(number > 1){
    if(number % divisor === 0){ 
        number /= divisor;// number  = number/divisor
        console.log(divisor);
    } else {
        divisor++;
    }
}console.log(divisor); // the largest prime factor of 600851475143


/* 


A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers

*/
          

  
// accept the string or number from the prompt  
let string = [];
let mul = 0;

let x = 100;
while(x < 1000){
    for(y = 100; y < 1000; y++){
        mul = x * y;
        let n = mul.toString();                   //para convertir valor multiplicado a cadena
        let stringSplit = n.split("");            //divide la cadena en matriz
        let reverseSplit = stringSplit.reverse(); //invertir la matriz de cadenas
        let joinSplit = reverseSplit.join("");    //unir la matriz invertida en una cadena
        if (joinSplit == n){          //verifique que la cadena invertida del clima sea igual al valor multiplicado
            string.push(joinSplit);  //como hay mucho valor, los pone en una matriz
        }
    }
  x++;
 }
 string.sort(function(a, b){return b-a}); // sort array in descending order as we want highest value 
 console.log(string[0]); 


 /* 


 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

*/
function smallestMult(n) {
    // setup state
    let inc = 2;
    let step = 2;
    let smallestNum = 2;	// loop over all numbers until we find the right one.
      // The sky is the limit!
    while (smallestNum <= Number.MAX_SAFE_INTEGER) {
          // start from our step value
      for (let i = 2; i <= n; i++) {
              // check if its divisibl
        const divisible = smallestNum % i === 0;
        // if it is not divisible, skip to the next number
        if (!divisible) {
          break;
        }
              // if it is divisible, increase our step to be our next num
        if (i === inc) {
          step = smallestNum;
          // increase our global incrementer by 1
          inc++;
        }
              // check if i is equal to our last digit
        if (i === n) {
                  // if it is, congrats! We have our smallestNum
          return smallestNum;
        }
      }
      smallestNum += step;
    }
  }
 r= smallestMult(20);
 console.log(r)


 